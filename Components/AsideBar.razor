@using CSE325_Team12_Project.Models.DTOs
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthClientService AuthClient

<aside class="asidebar @(Settings)">
    <div class="button-container">
        <Button Variant="ButtonVariant.Primary" Size="ButtonSize.Medium">
            @(IsChatsPage ? "Start a new conversation" : "Create a new troupe")
        </Button>
    </div>

    <div class="aside-content">
        <h2 class="aside-title">@Title</h2>
        <div class="direct-messages">
            @if (IsChatsPage)
            {
                @foreach (var participant in DirectParticipants)
                {
                    <div class="message">
                        <div class="profile-image">
                            <img src="@GetAvatar(participant.AvatarUrl)" alt="Profile Icon" width="50px" />
                        </div>
                        <p>@participant.Name</p>
                    </div>
                }
            }
            else
            {
                @foreach (var troupe in Troupes)
                {
                    <div class="message">
                        <div class="profile-image">
                            <img src="@GetAvatar(troupe.AvatarUrl)" alt="Troupe Icon" width="50px" />
                        </div>
                        <p>@troupe.Name</p>
                    </div>
                }
            }
        </div>
    </div>
</aside>

@code {
    private string Title => IsChatsPage ? "Direct Messages" : "Troupes";
    private string Settings => !IsSettings ? "visible" : "hidden";
    private bool IsChatsPage => NavigationManager.Uri.Contains("/chats");
    private bool IsSettings => NavigationManager.Uri.Contains("/settings");

    public List<ParticipantDto> DirectParticipants { get; private set; } = new();
    public List<TroupeDto> Troupes { get; private set; } = new();

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        if (!AuthClient.IsAuthenticated)
        {
            var restored = await AuthClient.RestoreSessionAsync();
            if (!restored || AuthClient.CurrentUser == null)
            {
                Console.WriteLine("❌ Unable to restore session.");
                return;
            }
        }

        await LoadSidebarData();
    }

    private async Task LoadSidebarData()
    {
        try
        {
            if (IsChatsPage)
            {
                var conversations = await Http.GetFromJsonAsync<List<ConversationDto>>("/api/conversations/mine");
                var currentId = AuthClient.CurrentUser?.Id.ToString();

                DirectParticipants = conversations?
                    .SelectMany(c => c.Participants)
                    .Where(p => p.UserId.ToString() != currentId)
                    .GroupBy(p => p.UserId)
                    .Select(g => g.First())
                    .ToList() ?? new();
            }
            else
            {
                Troupes = await Http.GetFromJsonAsync<List<TroupeDto>>("/api/membership/mine") ?? new();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"❌ Sidebar data load failed: {ex.Message}");
        }
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        _ = LoadSidebarData(); // refresh sidebar on route change
    }

    private string GetAvatar(string? url) => string.IsNullOrWhiteSpace(url) ? "images/Profile.svg" : url;

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    public class ConversationDto
    {
        public Guid Id { get; set; }
        public List<ParticipantDto> Participants { get; set; } = new();
    }

    public class ParticipantDto
    {
        public Guid UserId { get; set; }
        public string Name { get; set; } = string.Empty;
        public string AvatarUrl { get; set; } = string.Empty;
    }

    public class TroupeDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string AvatarUrl { get; set; } = string.Empty;
    }
}
