@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Chat - Troupe Chat</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h2>Real-Time Chat Demo</h2>
            <p class="text-muted">Test SignalR broadcasting and listening</p>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Messages</h5>
                    @if (unreadCount > 0)
                    {
                        <span class="badge bg-danger rounded-pill">@unreadCount new</span>
                    }
                </div>
                <div class="card-body" style="height: 400px; overflow-y: auto;" id="messageArea">
                    @if (messages.Count == 0)
                    {
                        <p class="text-muted text-center mt-5">No messages yet. Start chatting!</p>
                    }
                    else
                    {
                        @foreach (var message in messages)
                        {
                            <div class="message mb-3 @(message.IsOwnMessage ? "text-end" : "")">
                                <div class="@(message.IsOwnMessage ? "bg-primary text-white" : "bg-light") p-2 rounded d-inline-block" style="max-width: 70%;">
                                    <strong>@message.SenderName</strong>
                                    <p class="mb-0">@message.Content</p>
                                    <small class="text-muted">@message.CreatedAt.ToString("hh:mm tt")</small>
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="card-footer">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Type a message..." 
                               @bind="messageInput" @bind:event="oninput"
                               @onkeyup="HandleKeyPress" disabled="@(!IsConnected)" />
                        <button class="btn btn-primary" @onclick="SendMessage" disabled="@(!IsConnected || string.IsNullOrWhiteSpace(messageInput))">
                            <span class="oi oi-paper-plane"></span> Send
                        </button>
                    </div>
                    @if (isTyping)
                    {
                        <small class="text-muted">Someone is typing...</small>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Connection Info</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Your Name</label>
                        <input type="text" class="form-control" @bind="userName" disabled="@IsConnected" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Room ID</label>
                        <input type="text" class="form-control" @bind="roomId" disabled="@IsConnected" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <div class="alert @(IsConnected ? "alert-success" : "alert-warning") mb-0">
                            @if (IsConnected)
                            {
                                <span class="oi oi-check"></span> <strong>Connected</strong>
                            }
                            else
                            {
                                <span class="oi oi-warning"></span> <strong>Disconnected</strong>
                            }
                        </div>
                    </div>

                    @if (!IsConnected)
                    {
                        <button class="btn btn-success w-100" @onclick="Connect" disabled="@(string.IsNullOrWhiteSpace(userName) || string.IsNullOrWhiteSpace(roomId))">
                            <span class="oi oi-power-standby"></span> Connect
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-danger w-100" @onclick="Disconnect">
                            <span class="oi oi-power-standby"></span> Disconnect
                        </button>
                    }

                    <div class="mt-3">
                        <small class="text-muted">
                            <strong>Tip:</strong> Open this page in multiple browser tabs with different names to test real-time messaging!
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<ChatMessage> messages = new();
    private string messageInput = string.Empty;
    private string userName = "User" + new Random().Next(1000, 9999);
    private string roomId = "demo-room";
    private bool isTyping = false;
    private int unreadCount = 0;
    private System.Timers.Timer? typingTimer;

    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    protected override void OnInitialized()
    {
        // Initialize typing timer
        typingTimer = new System.Timers.Timer(2000);
        typingTimer.Elapsed += (sender, e) =>
        {
            isTyping = false;
            InvokeAsync(StateHasChanged);
        };
    }

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        // Listen for incoming messages
        hubConnection.On<object>("ReceiveTroupeMessage", async (messageData) =>
        {
            var json = System.Text.Json.JsonSerializer.Serialize(messageData);
            var data = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, System.Text.Json.JsonElement>>(json);
            
            if (data != null)
            {
                var isOwnMessage = data["senderName"].GetString() == userName;
                
                messages.Add(new ChatMessage
                {
                    SenderName = data["senderName"].GetString() ?? "Unknown",
                    Content = data["content"].GetString() ?? "",
                    CreatedAt = DateTime.Parse(data["createdAt"].GetString() ?? DateTime.Now.ToString()),
                    IsOwnMessage = isOwnMessage
                });
                
                // Show notification for messages from others
                if (!isOwnMessage)
                {
                    unreadCount++;
                    await ShowNotification(data["senderName"].GetString() ?? "Someone", data["content"].GetString() ?? "");
                }
                
                await InvokeAsync(StateHasChanged);
            }
        });

        // Listen for typing indicators
        hubConnection.On<object>("UserTyping", (data) =>
        {
            var json = System.Text.Json.JsonSerializer.Serialize(data);
            var typingData = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, System.Text.Json.JsonElement>>(json);
            
            if (typingData != null && typingData["userName"].GetString() != userName)
            {
                isTyping = true;
                typingTimer?.Stop();
                typingTimer?.Start();
                InvokeAsync(StateHasChanged);
            }
        });

        // Listen for connection confirmation
        hubConnection.On<string>("Connected", (connectionId) =>
        {
            Console.WriteLine($"Connected with ID: {connectionId}");
        });

        await hubConnection.StartAsync();
        
        // Join the room
        await hubConnection.SendAsync("JoinTroupe", roomId);
        
        StateHasChanged();
    }

    private async Task Disconnect()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("LeaveTroupe", roomId);
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
            hubConnection = null;
        }
        
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (hubConnection is not null && !string.IsNullOrWhiteSpace(messageInput))
        {
            await hubConnection.SendAsync("SendTroupeMessage", roomId, Guid.NewGuid().ToString(), userName, messageInput);
            messageInput = string.Empty;
            
            // Reset unread count and page title when user sends a message
            unreadCount = 0;
            await JSRuntime.InvokeVoidAsync("resetPageTitle");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(messageInput))
        {
            await SendMessage();
        }
        else if (!string.IsNullOrWhiteSpace(messageInput))
        {
            // Send typing indicator
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("SendTypingIndicator", roomId, userName);
            }
        }
    }

    private async Task ShowNotification(string senderName, string content)
    {
        try
        {
            // Play notification sound
            await JSRuntime.InvokeVoidAsync("playNotificationSound");
            
            // Show browser notification if supported and permitted
            await JSRuntime.InvokeVoidAsync("showBrowserNotification", senderName, content);
            
            // Update page title to show unread indicator
            await JSRuntime.InvokeVoidAsync("updatePageTitle", $"(1) New message from {senderName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Notification error: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await Disconnect();
        }
        
        typingTimer?.Dispose();
    }

    private class ChatMessage
    {
        public string SenderName { get; set; } = string.Empty;
        public string Content { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public bool IsOwnMessage { get; set; }
    }
}

