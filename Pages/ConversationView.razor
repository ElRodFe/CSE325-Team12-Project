@page "/chats/{ConversationId:guid}"
@using System.Net.Http.Json
@using CSE325_Team12_Project.Models.DTOs
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject AuthClientService AuthClient
@inject NavigationManager Navigation

<h3 class="text-center mt-4">@otherParticipant?.Name</h3>

@if (conversation != null)
{
    <div class="chat-box d-flex flex-column"
        style="height: 100vh; width: 100%; padding: 20px; overflow-y: auto; background-color: #f5f5f5;">
        <div class="chat-messages mb-3" style="flex-grow: 1; overflow-y: auto;">
            @foreach (var msg in chatMessages.OrderBy(m => m.CreatedAt))
            {
                var isMine = msg.SenderId == AuthClient.CurrentUser?.Id;
                <div class="chat-bubble @(isMine ? "mine" : "theirs")">
                    <div class="chat-content">@msg.Content</div>
                    <small class="text-muted">@msg.CreatedAt.ToLocalTime().ToString("g")</small>
                </div>
            }
        </div>

        <EditForm Model="@newMessage" OnValidSubmit="@SendMessage">
            <InputTextArea class="form-control mb-2" @bind-Value="newMessage.Content" rows="3"
                placeholder="Type your message..." />
            <div class="d-flex justify-content-center">
                <button class="btn btn-success px-5" type="submit" disabled="@isSending">Send</button>
            </div>
        </EditForm>
    </div>
}
else
{
    <p class="text-center mt-5">Loading conversation...</p>
}

@code {
    [Parameter] public Guid ConversationId { get; set; }

    private ConversationDto? conversation;
    private List<MessageDto> chatMessages = new();
    private bool isSending = false;
    private bool hasRendered = false;
    private UserDto? otherParticipant;

    private MessageRequest newMessage = new();
    private HubConnection? hubConnection;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRendered)
        {
            hasRendered = true;

            var restored = await AuthClient.RestoreSessionAsync();
            if (!restored || AuthClient.CurrentUser == null)
            {
                Console.WriteLine("‚ùå Unable to restore session.");
                return;
            }

            await LoadConversation();

            newMessage.ConversationId = ConversationId;
            newMessage.TroupeId = null;
            newMessage.SenderId = AuthClient.CurrentUser.Id;

            await InitializeSignalR();

            StateHasChanged();
        }
    }

    private async Task LoadConversation()
    {
        try
        {
            conversation = await Http.GetFromJsonAsync<ConversationDto>($"/api/Conversations/{ConversationId}");
            chatMessages = conversation?.Messages.OrderBy(m => m.CreatedAt).ToList() ?? new();

            otherParticipant = conversation?.Participants
            .FirstOrDefault(p => p.Id != AuthClient.CurrentUser?.Id);
        }
        catch (HttpRequestException ex)
        {
            Console.Error.WriteLine($"‚ùå Failed to load conversation: {ex.Message}");
            conversation = null;
        }
    }

    private async Task InitializeSignalR()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .WithAutomaticReconnect()
        .Build();

        // üîÑ SignalR Listener: Refresh UI only if incoming message matches current conversation
        hubConnection.On<MessageDto>("ReceiveDirectMessage", msg =>
        {
            if (msg.ConversationId == ConversationId)
            {
                chatMessages.Add(msg);
                chatMessages = chatMessages.OrderBy(m => m.CreatedAt).ToList();
                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinConversation", ConversationId.ToString());
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage.Content)) return;

        isSending = true;

        var response = await Http.PostAsJsonAsync("/api/Message/send", newMessage);
        if (!response.IsSuccessStatusCode)
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.Error.WriteLine($"‚ùå Message send failed: {response.StatusCode} - {error}");
        }

        newMessage.Content = string.Empty;
        isSending = false;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("LeaveConversation", ConversationId.ToString());
            await hubConnection.DisposeAsync();
        }
    }

    public class MessageRequest
    {
        public Guid SenderId { get; set; }
        public string Content { get; set; } = string.Empty;
        public Guid? TroupeId { get; set; }
        public Guid? ConversationId { get; set; }
    }

    public class ConversationDto
    {
        public Guid Id { get; set; }
        public Guid CreatedBy { get; set; }
        public bool IsGroup { get; set; }
        public DateTime CreatedAt { get; set; }
        public List<UserDto> Participants { get; set; } = new();
        public List<MessageDto> Messages { get; set; } = new();
    }
}