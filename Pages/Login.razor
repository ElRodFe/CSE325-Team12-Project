@page "/login"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@layout LadingLayout


@inject AuthClientService Auth

<PageTitle>Login - Troupe Chat</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center mb-0">Welcome Back</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" type="email" class="form-control" @bind-Value="loginModel.Email"
                                placeholder="Enter your email" />
                            <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" class="form-control"
                                @bind-Value="loginModel.Password" placeholder="Enter your password" />
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">@errorMessage</div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success" role="alert">@successMessage</div>
                        }

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"
                                        aria-hidden="true"></span>
                                }
                                Sign In
                            </button>
                        </div>
                    </EditForm>

                    <div class="text-center mt-3">
                        <p class="mb-0">
                            Don't have an account?
                            <a href="/register" class="text-decoration-none">Create one here</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        var success = await Auth.LoginAsync(loginModel.Email, loginModel.Password);

        if (success && Auth.IsAuthenticated)
        {
            successMessage = $"Welcome back, {Auth.CurrentUser?.Name}!";
            await Task.Delay(1000);
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid email or password.";
        }

        isLoading = false;
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}