
@page "/settings"
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using CSE325_Team12_Project.Models
@inject HttpClient Http
@inject AuthClientService AuthClient


<div class="settings-container">

    <div class="header">
        <h2 >Settings</h2>
        <img src="/images/Settings-icons.svg" alt="settings Icon" class="avatar" width="40" height="40"/>
    </div>
    

	@if (user != null)
	{
		<div class="edit-user">
			<div class="edit-header">
				<h4>Edit User</h4>
				<img src="/images/User.svg" alt="settings Icon" class="avatar" width="40" height="25"/>
			</div>
			
			<EditForm Model="editModel" OnValidSubmit="HandleValidSubmit" class="settings-form">
				<div class="mb-3">
					<label for="name" class="form-label">Name</label>
					<InputText id="name" class="form-control" @bind-Value="editModel.Name" />
				</div>
				<div class="mb-4">
					<label for="email" class="form-label">Email</label>
					<InputText id="email" class="form-control" @bind-Value="editModel.Email" />
				</div>
				<button class="btn btn-primary" type="submit" disabled="@isSaving">Save Changes</button>
				@if (!string.IsNullOrWhiteSpace(message))
				{
					<div class="mt-3 alert alert-info">@message</div>
				}
			</EditForm>

		</div>

		<div class="edit-password">
			<div class="edit-header">
				<h4>Edit Password</h4>
				<img src="/images/Password.svg" alt="settings Icon" class="avatar" width="40" height="25"/>
			</div>
			<EditForm Model="passwordModel" OnValidSubmit="HandlePasswordChange" class="settings-form">
				<div class="mb-3">
					<label for="oldPassword" class="form-label">Current Password</label>
					<InputText id="oldPassword" class="form-control" @bind-Value="passwordModel.OldPassword" type="password" />
				</div>
				<div class="mb-3">
					<label for="newPassword" class="form-label">New Password</label>
					<InputText id="newPassword" class="form-control" @bind-Value="passwordModel.NewPassword" type="password" />
				</div>
				<button class="btn btn-primary" type="submit" disabled="@isChangingPassword">Change Password</button>
				@if (!string.IsNullOrWhiteSpace(passwordMessage))
				{
					<div class="mt-3 alert alert-info">@passwordMessage</div>
				}
			</EditForm>
		</div>
		

	}
    else if (loadFailed)
    {
        <div class="alert alert-danger">Failed to load user info.</div>
    }
    else
    {
        <div>Loading...</div>
    }

</div>


@code {
	private User? user;
	private EditUserRequest editModel = new();
	private bool isSaving = false;
	private bool loadFailed = false;
	private string message = string.Empty;

	private ChangePasswordRequest passwordModel = new();
	private bool isChangingPassword = false;
	private string passwordMessage = string.Empty;
	private async Task HandlePasswordChange()
	{
		isChangingPassword = true;
		passwordMessage = string.Empty;
		try
		{
			var request = new HttpRequestMessage(HttpMethod.Post, $"/api/user/{AuthClient.CurrentUser.Id}/change-password");
			if (!string.IsNullOrWhiteSpace(AuthClient.Token))
			{
				request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthClient.Token);
			}
			request.Content = JsonContent.Create(passwordModel);
			var response = await Http.SendAsync(request);
			if (response.IsSuccessStatusCode)
			{
				passwordMessage = "Password changed successfully.";
				passwordModel = new();
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				passwordMessage = $"Error: {error}";
			}
		}
		catch (Exception ex)
		{
			passwordMessage = $"Error: {ex.Message}";
		}
		isChangingPassword = false;
	}

	private bool hasRendered = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && !hasRendered)
		{
			hasRendered = true;

			if (AuthClient.CurrentUser == null)
			{
				var restored = await AuthClient.RestoreSessionAsync();
				if (!restored || AuthClient.CurrentUser == null)
				{
					loadFailed = true;
					StateHasChanged();
					return;
				}
			}

			await LoadUser();
			StateHasChanged();
		}
	}

	private async Task LoadUser()
	{
		try
		{
			var request = new HttpRequestMessage(HttpMethod.Get, $"/api/user/{AuthClient.CurrentUser.Id}");
			if (!string.IsNullOrWhiteSpace(AuthClient.Token))
			{
				request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthClient.Token);
			}
			var response = await Http.SendAsync(request);
			if (!response.IsSuccessStatusCode)
			{
				loadFailed = true;
				return;
			}
			user = await response.Content.ReadFromJsonAsync<User>();
			if (user != null)
			{
				editModel.Name = user.Name;
				editModel.Email = user.Email;
				editModel.AvatarUrl = user.AvatarUrl ?? string.Empty;
				editModel.Role = user.Role;
			}
		}
		catch
		{
			loadFailed = true;
		}
	}

	private async Task HandleValidSubmit()
	{
		isSaving = true;
		message = string.Empty;
		try
		{
			var request = new HttpRequestMessage(HttpMethod.Put, $"/api/user/{AuthClient.CurrentUser.Id}");
			if (!string.IsNullOrWhiteSpace(AuthClient.Token))
			{
				request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthClient.Token);
			}
			request.Content = JsonContent.Create(editModel);
			var response = await Http.SendAsync(request);
			if (response.IsSuccessStatusCode)
			{
				message = "User info updated successfully.";
				await LoadUser();
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				message = $"Error: {error}";
			}
		}
		catch (Exception ex)
		{
			message = $"Error: {ex.Message}";
		}
		isSaving = false;
	}

	public class EditUserRequest
	{
		public string Name { get; set; } = string.Empty;
		public string Email { get; set; } = string.Empty;
		public string AvatarUrl { get; set; } = string.Empty;
		public UserRole Role { get; set; } = UserRole.Trouper;
	}

	public class ChangePasswordRequest
	{
		public string OldPassword { get; set; } = string.Empty;
		public string NewPassword { get; set; } = string.Empty;
	}
}