@page "/troupes/{TroupeId:guid}"
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using CSE325_Team12_Project.Models.DTOs
@inject HttpClient Http
@inject AuthClientService AuthClient
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.SignalR.Client

<h3 class="text-center mt-4">@troupe?.Name</h3>

@if (troupe != null)
{
    <div class="text-center mb-3">
        <button class="btn btn-outline-secondary" @onclick="ToggleDetails">
            @(showDetails ? "Hide Details" : "Show Details")
        </button>
    </div>

    @if (showDetails)
    {
        <div class="card mb-4 mx-auto" style="max-width: 80%;">
            <div class="card-body">
                <p><strong>Description:</strong> @troupe.Description</p>
                <p><strong>Created By:</strong> @troupe.CreatedBy?.Name</p>
                <p><strong>Members:</strong></p>
                <ul>
                    @foreach (var member in troupe.Members)
                    {
                        <li>@(string.IsNullOrWhiteSpace(member.Name) ? member.Email : member.Name)</li>
                    }
                </ul>
            </div>
        </div>
    }

    <div class="chat-box d-flex flex-column"
        style="height: 100vh; width: 100%; padding: 20px; overflow-y: auto; background-color: #f5f5f5;">
        <div class="chat-messages mb-3" style="flex-grow: 1; overflow-y: auto;">
            @foreach (var msg in chatMessages.OrderBy(m => m.CreatedAt))
            {
                var isMine = msg.SenderId == AuthClient.CurrentUser?.Id;
                <div class="chat-bubble @(isMine ? "mine" : "theirs")">
                    <div class="chat-content">
                        @if (!isMine)
                        {
                            <strong>@msg.SenderName:</strong>
                        }
                        @msg.Content
                    </div>
                    <small class="text-muted">@msg.CreatedAt.ToLocalTime().ToString("g")</small>
                </div>
            }
        </div>

        <EditForm Model="@newMessage" OnValidSubmit="@SendMessage">
            <InputTextArea class="form-control mb-2" @bind-Value="newMessage.Content" rows="3"
                placeholder="Type your message..." />
            <div class="d-flex justify-content-center">
                <button class="btn btn-success px-5" type="submit" disabled="@isSending">Send</button>
            </div>
        </EditForm>
    </div>
}
else if (loadFailed)
{
    <p class="text-center mt-5 text-danger">‚ùå Failed to load troupe. Please check your connection or try again later.</p>
}
else
{
    <p class="text-center mt-5">Loading troupe details...</p>
}

@code {
    [Parameter] public Guid TroupeId { get; set; }

    private TroupeDto? troupe;
    private List<MessageDto> chatMessages = new();
    private bool showDetails = false;
    private bool isSending = false;
    private bool loadFailed = false;
    private bool hasInitialized = false;

    private SendMessageRequest newMessage = new();
    private HubConnection? hubConnection;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasInitialized)
        {
            hasInitialized = true;

            if (!AuthClient.IsAuthenticated || AuthClient.CurrentUser == null)
            {
                var restored = await AuthClient.RestoreSessionAsync();
                if (!restored || AuthClient.CurrentUser == null)
                {
                    Console.Error.WriteLine("‚ùå Unable to restore session.");
                    loadFailed = true;
                    StateHasChanged();
                    return;
                }
            }

            await LoadTroupe();

            newMessage.TroupeId = TroupeId;
            newMessage.ConversationId = null;
            newMessage.SenderId = AuthClient.CurrentUser.Id;

            await InitializeSignalR();

            StateHasChanged();
        }
    }

    private async Task LoadTroupe()
    {
        try
        {
            Console.WriteLine($"üîç Fetching troupe with ID: {TroupeId}");

            var request = new HttpRequestMessage(HttpMethod.Get, $"/api/troupe/{TroupeId}");

            if (!string.IsNullOrWhiteSpace(AuthClient.Token))
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthClient.Token);
            }

            var response = await Http.SendAsync(request);
            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.Error.WriteLine($"‚ùå API error: {response.StatusCode} - {error}");
                loadFailed = true;
                return;
            }

            troupe = await response.Content.ReadFromJsonAsync<TroupeDto>();
            chatMessages = troupe?.Messages.OrderBy(m => m.CreatedAt).ToList() ?? new();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"‚ùå Exception in LoadTroupe: {ex.Message}");
            loadFailed = true;
        }
    }

    private async Task InitializeSignalR()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .WithAutomaticReconnect()
        .Build();

        // üîÑ SignalR Listener: Refresh UI only if incoming message matches current troupe
        hubConnection.On<MessageDto>("ReceiveTroupeMessage", msg =>
        {
            if (msg.TroupeId == TroupeId)
            {
                chatMessages.Add(msg);
                chatMessages = chatMessages.OrderBy(m => m.CreatedAt).ToList();
                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinTroupe", TroupeId.ToString());
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage.Content)) return;

        isSending = true;

        var response = await Http.PostAsJsonAsync("/api/message/send", newMessage);
        if (response.IsSuccessStatusCode)
        {
            var sent = await response.Content.ReadFromJsonAsync<MessageDto>();
            if (sent != null)
            {
                chatMessages = chatMessages.OrderBy(m => m.CreatedAt).ToList();
                newMessage.Content = string.Empty;
                StateHasChanged();
            }
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.Error.WriteLine($"‚ùå Message send failed: {response.StatusCode} - {error}");
        }

        isSending = false;
    }

    private void ToggleDetails() => showDetails = !showDetails;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("LeaveTroupe", TroupeId.ToString());
            await hubConnection.DisposeAsync();
        }
    }
}