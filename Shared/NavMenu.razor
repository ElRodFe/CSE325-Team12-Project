<div>

    <div class="logo">
        <a href="/chats">
            <img src="images/Logo.png" alt="Logo" height="80px"/>
        </a>    
    </div>

    <div class="nav-links">
        <div class="nav-item @(IsActive("/chats") ? "active" : null)">
            <a href="/chats" class="link">
                <img src="images/Chat-icon.svg" alt="Chat Icon" height="45px" width="45px"/>
                <p>Chats</p>
            </a>
        </div>
        <div class="nav-item @(IsActive("/troupes") ? "active" : null)">
            <a href="/troupes" class="link">
                <img src="images/Troupes-icon.svg" alt="Troupes Icon" height="45px" width="45px"/>
                <p>Troupes</p>
            </a>
        </div>
        <div class="nav-item @(IsActive("/settings") ? "active" : null)">
            <a href="/settings" class="link">
                <img src="images/Settings-icons.svg" alt="Settings Icon" height="45px" width="45px"/>
                <p>Settings</p>
            </a>
        </div>
    </div>

</div>
@inject NavigationManager Navigation

@code {
    private bool IsActive(string href)
    {
        var uri = Navigation.ToBaseRelativePath(Navigation.Uri).TrimEnd('/');
        var link = href.TrimStart('/');
        
        return uri.StartsWith(link, StringComparison.OrdinalIgnoreCase);
    }
    protected override void OnInitialized()
    {
        Navigation.LocationChanged += HandleLocationChanged;
    }

    private void HandleLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }
}